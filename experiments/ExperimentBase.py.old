import time
import datetime
import pandas as pd

from experiments.evaluation.main import evaluate
from src.globals import ds_dev
from src.logging.model_log import log

def print_scores_ordered(variants, scores, exp_name):
    f1_s, v_s = zip(*reversed(sorted(zip(scores, variants))))
    data = [[" ".join(str(e) for e in exp_name) + ": " + " ".join(str(v) for v in v_s[i]),f1_s[i][0],f1_s[i][1]] for i in range(len(f1_s))]
    res = pd.DataFrame(columns=["Variation","F1@10","F1@50"], data=data)

    print("Results of {exp_name}:".format(exp_name=exp_name))
    pd.set_option('precision', 20)
    with pd.option_context('display.max_rows', None, 'display.max_columns', None):
        print(res)
    return res

def run_experiment(model_type, settings):
    assert settings["dataset"] == ds_dev

    start = time.time()
    m = model_type(setts=settings)
    subm = m.fit_predict()

    logging = {
        "model": m.__class__.__name__,
        "start": start,
        "end": time.time(),
        "segmentation method": "histogram",
    }

    print("Evaluate...")
    eval_res = evaluate(subm, Xs=[10, 50])
    logging["evaluation"] = eval_res
    f1_10 = float(eval_res.loc[(eval_res['X'] == 10) & (eval_res['topic_id'] == 'all')]["F1@X"])
    f1_50 = float(eval_res.loc[(eval_res['X'] == 50) & (eval_res['topic_id'] == 'all')]["F1@X"])
    logging["f1@10"] = f1_10
    logging["model_suffix"] = "_{f1}".format(f1=f1_10)

    logging.update(settings)
    log(logging, print_output=True)
    return (f1_10, f1_50)

def run_multi_param_experiment(model_type, baseline_settings, parameters, variants):
    settings = dict(baseline_settings)
    f1_res = []
    for v in variants:
        assert len(v) == len(parameters)
        print("Started variant:", v)
        for i in range(len(parameters)):
            parameter = parameters[i]
            value = v[i]
            settings[parameter] = value
        f1 = run_experiment(model_type, settings)
        f1_res.append(f1)
    return print_scores_ordered(variants, f1_res, parameters)

def run_simple_experiment(model_type, baseline_settings, parameter, variants):
    v = [[v] for v in variants]
    run_multi_param_experiment(model_type, baseline_settings, [parameter], v)

def E1_baseline(model_type, baseline_settings):
    f1 = run_experiment(model_type, dict(baseline_settings))
    return print_scores_ordered(["baseline"], [f1], "baseline")

def E3_concepts(model_type, baseline_settings):
    variants = ["default_concepts", "yolo_concepts", "detectron_concepts"]
    parameter = "concept_src"
    return run_simple_experiment(model_type, baseline_settings, parameter, variants)

def E4_idf(model_type, baseline_settings):
    variants = [False, True]
    parameter = "use_idf"
    return run_simple_experiment(model_type, baseline_settings, parameter, variants)

def E5_potentiate(model_type, baseline_settings):
    variants = [[i,j] for i in range(1,6,1) for j in range(1,6,1)]
    parameters = ["intensify_n", "intensify_m"]
    return run_multi_param_experiment(model_type, baseline_settings, parameters, variants)

def E6_imgs_per_day(model_type, baseline_settings):
    variants = [i for i in range(0,5,1)]
    parameter = "subm_img_per_day"
    return run_simple_experiment(model_type, baseline_settings, parameter, variants)

def E8_diff_labels(model_type, baseline_settings):
    variants = [[att,cat,con] for att in [True, False] for cat in [True, False] for con in [True, False] if att or cat or con]
    parameters = ("use_attributes", "use_categories", "use_concepts")
    return run_multi_param_experiment(model_type, baseline_settings, parameters, variants)

def run_all_base_experiments(model_type, baseline_settings):
    res = pd.DataFrame(columns=["Variation","F1@10","F1@50"], data=[])
    res = pd.concat([res, E1_baseline(model_type, baseline_settings)], ignore_index=True)
    res = pd.concat([res, E3_concepts(model_type, baseline_settings)], ignore_index=True)
    res = pd.concat([res, E4_idf(model_type, baseline_settings)], ignore_index=True)
    res = pd.concat([res, E5_potentiate(model_type, baseline_settings)], ignore_index=True)
    res = pd.concat([res, E6_imgs_per_day(model_type, baseline_settings)], ignore_index=True)
    res = pd.concat([res, E8_diff_labels(model_type, baseline_settings)], ignore_index=True)
    print(res)
    return res
